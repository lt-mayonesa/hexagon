"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7658],{3031:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"guides/plugins","title":"Plugins","description":"Hexagon supports plugins to extend its functionality. This guide explains how to create, configure, and use plugins in your CLI.","source":"@site/docs/guides/plugins.md","sourceDirName":"guides","slug":"/guides/plugins","permalink":"/hexagon/docs/guides/plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/plugins.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Theming","permalink":"/hexagon/docs/guides/theming"},"next":{"title":"Custom Tools","permalink":"/hexagon/docs/advanced/custom-tools"}}');var t=i(4848),s=i(8453);const l={sidebar_position:5},r="Plugins",a={},u=[{value:"Understanding Plugins",id:"understanding-plugins",level:2},{value:"Configuring Plugins",id:"configuring-plugins",level:2},{value:"Creating a Plugin",id:"creating-a-plugin",level:2},{value:"Plugin Hooks",id:"plugin-hooks",level:3},{value:"Adding Custom Tool Types",id:"adding-custom-tool-types",level:3},{value:"Plugin Best Practices",id:"plugin-best-practices",level:2},{value:"Example Plugins",id:"example-plugins",level:2},{value:"Logging Plugin",id:"logging-plugin",level:3},{value:"Authentication Plugin",id:"authentication-plugin",level:3},{value:"Next Steps",id:"next-steps",level:2}];function g(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,t.jsx)(e.p,{children:"Hexagon supports plugins to extend its functionality. This guide explains how to create, configure, and use plugins in your CLI."}),"\n",(0,t.jsx)(e.h2,{id:"understanding-plugins",children:"Understanding Plugins"}),"\n",(0,t.jsx)(e.p,{children:"Plugins are Python modules that can extend Hexagon's functionality by:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Adding new tool types"}),"\n",(0,t.jsx)(e.li,{children:"Modifying the behavior of existing tools"}),"\n",(0,t.jsx)(e.li,{children:"Adding new commands or options"}),"\n",(0,t.jsx)(e.li,{children:"Integrating with external systems"}),"\n",(0,t.jsx)(e.li,{children:"Customizing the user interface"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"configuring-plugins",children:"Configuring Plugins"}),"\n",(0,t.jsxs)(e.p,{children:["To use plugins in your CLI, specify them in the ",(0,t.jsx)(e.code,{children:"plugins"})," list in your configuration file:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"cli:\n  name: My CLI\n  command: mycli\n  plugins:\n    - my_plugin\n    - another_plugin\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Hexagon will look for these plugins in your ",(0,t.jsx)(e.code,{children:"custom_tools_dir"})," or in the Python path."]}),"\n",(0,t.jsx)(e.h2,{id:"creating-a-plugin",children:"Creating a Plugin"}),"\n",(0,t.jsxs)(e.p,{children:["To create a plugin, create a Python module with a ",(0,t.jsx)(e.code,{children:"setup"})," function that will be called when Hexagon loads the plugin:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# my_plugin.py\n\ndef setup(cli, tools, envs):\n    """Set up the plugin.\n    \n    Args:\n        cli: The CLI configuration\n        tools: The list of tools\n        envs: The list of environments\n    """\n    print("Setting up my_plugin...")\n    # Your plugin initialization code here\n'})}),"\n",(0,t.jsx)(e.h3,{id:"plugin-hooks",children:"Plugin Hooks"}),"\n",(0,t.jsxs)(e.p,{children:["Plugins can register hooks to execute code at specific points in Hexagon's lifecycle. Hexagon provides several hooks through the ",(0,t.jsx)(e.code,{children:"HexagonHooks"})," class:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from hexagon.support.hooks import HexagonHooks\n\ndef setup(cli, tools, envs):\n    # Register a hook to run at the start of Hexagon\n    HexagonHooks.start.register(my_start_function)\n    \n    # Register a hook to run at the end of Hexagon\n    HexagonHooks.end.register(my_end_function)\n\ndef my_start_function():\n    print("Hexagon is starting...")\n\ndef my_end_function():\n    print("Hexagon is ending...")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"adding-custom-tool-types",children:"Adding Custom Tool Types"}),"\n",(0,t.jsx)(e.p,{children:"Plugins can add custom tool types by registering them with Hexagon:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from hexagon.domain.tool import Tool, ToolType\nfrom hexagon.runtime.execute.tool import register_tool_executor\n\nclass MyCustomTool(Tool):\n    custom_property: str\n\ndef execute_my_custom_tool(tool, env=None):\n    print(f"Executing custom tool: {tool.name}")\n    print(f"Custom property: {tool.custom_property}")\n    return ["Custom tool executed successfully"]\n\ndef setup(cli, tools, envs):\n    # Register the custom tool type\n    ToolType.custom = "custom"\n    \n    # Register the executor for the custom tool type\n    register_tool_executor(ToolType.custom, execute_my_custom_tool)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"plugin-best-practices",children:"Plugin Best Practices"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Single Responsibility"}),": Each plugin should have a single, clear responsibility"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Documentation"}),": Document your plugin's purpose, configuration, and usage"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Error Handling"}),": Handle errors gracefully to avoid breaking the CLI"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Compatibility"}),": Clearly specify which versions of Hexagon your plugin is compatible with"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Testing"}),": Write tests for your plugin to ensure it works correctly"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"example-plugins",children:"Example Plugins"}),"\n",(0,t.jsx)(e.p,{children:"Here are some examples of what you can do with plugins:"}),"\n",(0,t.jsx)(e.h3,{id:"logging-plugin",children:"Logging Plugin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# logging_plugin.py\nimport logging\nfrom hexagon.support.hooks import HexagonHooks\n\ndef setup(cli, tools, envs):\n    # Configure logging\n    logging.basicConfig(filename="hexagon.log", level=logging.INFO)\n    \n    # Register hooks\n    HexagonHooks.start.register(log_start)\n    HexagonHooks.end.register(log_end)\n\ndef log_start():\n    logging.info("Hexagon started")\n\ndef log_end():\n    logging.info("Hexagon ended")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"authentication-plugin",children:"Authentication Plugin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# auth_plugin.py\nfrom hexagon.support.hooks import HexagonHooks\n\ndef setup(cli, tools, envs):\n    HexagonHooks.start.register(check_auth)\n\ndef check_auth():\n    # Check if the user is authenticated\n    if not is_authenticated():\n        print("You are not authenticated. Please log in.")\n        login()\n\ndef is_authenticated():\n    # Check if the user is authenticated\n    # This is just an example, implement your own authentication logic\n    return False\n\ndef login():\n    # Implement your login logic\n    print("Logging in...")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.p,{children:["Learn about more advanced topics in the ",(0,t.jsx)(e.a,{href:"../advanced/custom-tools",children:"Advanced"})," section."]})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(g,{...n})}):g(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function l(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);