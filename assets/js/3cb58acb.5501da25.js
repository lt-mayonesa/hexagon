"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[920],{3650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"advanced/custom-tools","title":"Custom Tools","description":"Hexagon allows you to create custom tools with Python code. This guide explains how to create and use custom tools in your CLI.","source":"@site/docs/advanced/custom-tools.md","sourceDirName":"advanced","slug":"/advanced/custom-tools","permalink":"/hexagon/docs/advanced/custom-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/custom-tools.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Plugins","permalink":"/hexagon/docs/guides/plugins"},"next":{"title":"Hooks","permalink":"/hexagon/docs/advanced/hooks"}}');var s=o(4848),r=o(8453);const i={sidebar_position:1},a="Custom Tools",c={},l=[{value:"Understanding Custom Tools",id:"understanding-custom-tools",level:2},{value:"Creating a Custom Tool",id:"creating-a-custom-tool",level:2},{value:"Step 1: Set Up Your Custom Tools Directory",id:"step-1-set-up-your-custom-tools-directory",level:3},{value:"Step 2: Create a Python Module",id:"step-2-create-a-python-module",level:3},{value:"Step 3: Reference the Function in Your Configuration",id:"step-3-reference-the-function-in-your-configuration",level:3},{value:"Function Return Values",id:"function-return-values",level:2},{value:"Accepting Arguments",id:"accepting-arguments",level:2},{value:"Accessing CLI Context",id:"accessing-cli-context",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Data Processing Tool",id:"example-data-processing-tool",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"custom-tools",children:"Custom Tools"})}),"\n",(0,s.jsx)(n.p,{children:"Hexagon allows you to create custom tools with Python code. This guide explains how to create and use custom tools in your CLI."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-custom-tools",children:"Understanding Custom Tools"}),"\n",(0,s.jsx)(n.p,{children:"Custom tools are Python functions that can be called from your CLI. They provide a way to implement complex logic that can't be easily expressed as a shell command or web link."}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-custom-tool",children:"Creating a Custom Tool"}),"\n",(0,s.jsx)(n.p,{children:"To create a custom tool, you need to:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a Python module in your ",(0,s.jsx)(n.code,{children:"custom_tools_dir"})]}),"\n",(0,s.jsx)(n.li,{children:"Define a function in that module"}),"\n",(0,s.jsx)(n.li,{children:"Reference the function in your CLI configuration"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-1-set-up-your-custom-tools-directory",children:"Step 1: Set Up Your Custom Tools Directory"}),"\n",(0,s.jsxs)(n.p,{children:["Specify a ",(0,s.jsx)(n.code,{children:"custom_tools_dir"})," in your CLI configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"cli:\n  name: My CLI\n  command: mycli\n  custom_tools_dir: ./custom_tools  # relative to the config file\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-create-a-python-module",children:"Step 2: Create a Python Module"}),"\n",(0,s.jsx)(n.p,{children:"Create a Python file in your custom tools directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# custom_tools/data_tools.py\n\ndef analyze_data():\n    """Analyze data and return results."""\n    print("Analyzing data...")\n    \n    # Your analysis logic here\n    results = [\n        "Analysis complete",\n        "Found 3 issues",\n        "Performance: 95%"\n    ]\n    \n    return results\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-reference-the-function-in-your-configuration",children:"Step 3: Reference the Function in Your Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Reference the function in your CLI configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools:\n  - name: analyze\n    alias: a\n    long_name: Analyze Data\n    description: Run data analysis\n    type: function\n    function: data_tools.analyze_data\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"function"})," property should be the module name and function name, separated by a dot."]}),"\n",(0,s.jsx)(n.h2,{id:"function-return-values",children:"Function Return Values"}),"\n",(0,s.jsx)(n.p,{children:"Custom functions should return a list of strings, which will be displayed as output in the CLI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def my_function():\n    # Your logic here\n    return ["Line 1 of output", "Line 2 of output"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"If your function doesn't return anything, Hexagon will display a default success message."}),"\n",(0,s.jsx)(n.h2,{id:"accepting-arguments",children:"Accepting Arguments"}),"\n",(0,s.jsx)(n.p,{children:"You can define functions that accept arguments, which will be passed from the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def greet(name):\n    """Greet a person by name."""\n    return [f"Hello, {name}!"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"In your configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools:\n  - name: greet\n    alias: g\n    long_name: Greet\n    description: Greet a person\n    type: function\n    function: greetings.greet\n"})}),"\n",(0,s.jsx)(n.p,{children:"Users can then pass arguments when calling the tool:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mycli greet John\n"})}),"\n",(0,s.jsx)(n.h2,{id:"accessing-cli-context",children:"Accessing CLI Context"}),"\n",(0,s.jsx)(n.p,{children:"You can access the CLI context by defining a function that accepts specific parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def show_context(cli, tools, envs, env=None):\n    """Show the CLI context."""\n    output = [\n        f"CLI Name: {cli.name}",\n        f"CLI Command: {cli.command}",\n        f"Number of Tools: {len(tools)}",\n        f"Number of Environments: {len(envs)}",\n    ]\n    \n    if env:\n        output.append(f"Current Environment: {env.name}")\n    \n    return output\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Hexagon will automatically pass the ",(0,s.jsx)(n.code,{children:"cli"}),", ",(0,s.jsx)(n.code,{children:"tools"}),", ",(0,s.jsx)(n.code,{children:"envs"}),", and ",(0,s.jsx)(n.code,{children:"env"})," parameters if your function defines them."]}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"You should handle errors in your functions to provide a good user experience:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def risky_operation():\n    """Perform a risky operation."""\n    try:\n        # Your risky code here\n        return ["Operation successful"]\n    except Exception as e:\n        return [f"Error: {str(e)}"]  # Return error message as output\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Add docstrings to your functions to document their purpose and usage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Handle errors gracefully to provide a good user experience"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Return Values"}),": Return a list of strings for consistent output formatting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularity"}),": Keep functions small and focused on a single task"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Write tests for your custom tools to ensure they work correctly"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-data-processing-tool",children:"Example: Data Processing Tool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# custom_tools/data_processor.py\nimport json\nimport os\n\ndef process_data(file_path):\n    """Process data from a JSON file.\n    \n    Args:\n        file_path: Path to the JSON file\n        \n    Returns:\n        List of strings with processing results\n    """\n    if not os.path.exists(file_path):\n        return [f"Error: File not found: {file_path}"]\n    \n    try:\n        with open(file_path, \'r\') as f:\n            data = json.load(f)\n        \n        # Process the data\n        item_count = len(data)\n        categories = set(item[\'category\'] for item in data if \'category\' in item)\n        \n        return [\n            f"Processed {item_count} items",\n            f"Found {len(categories)} categories: {\', \'.join(categories)}"\n        ]\n    except json.JSONDecodeError:\n        return ["Error: Invalid JSON file"]\n    except Exception as e:\n        return [f"Error: {str(e)}"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["Learn how to use ",(0,s.jsx)(n.a,{href:"hooks",children:"Hooks"})," to extend your CLI's functionality further."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);