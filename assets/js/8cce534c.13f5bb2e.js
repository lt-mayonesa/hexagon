"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[547],{5092:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"advanced/prompting","title":"Prompting System","description":"Hexagon provides a powerful and flexible prompting system that allows you to create interactive command-line interfaces with rich input capabilities. This guide explains how the prompting system works and how to use it in your custom tools.","source":"@site/docs/advanced/prompting.md","sourceDirName":"advanced","slug":"/advanced/prompting","permalink":"/hexagon/docs/advanced/prompting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/prompting.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Custom Tools","permalink":"/hexagon/docs/advanced/custom-tools"},"next":{"title":"Hooks","permalink":"/hexagon/docs/advanced/hooks"}}');var i=s(4848),o=s(8453);const r={sidebar_position:4},a="Prompting System",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Defining Arguments",id:"defining-arguments",level:2},{value:"Argument Types",id:"argument-types",level:3},{value:"The Arg Function",id:"the-arg-function",level:2},{value:"Prompt Types",id:"prompt-types",level:2},{value:"Text Input",id:"text-input",level:3},{value:"Text Input with Autocomplete",id:"text-input-with-autocomplete",level:3},{value:"Numeric Input",id:"numeric-input",level:3},{value:"Boolean Input",id:"boolean-input",level:3},{value:"List Selection",id:"list-selection",level:3},{value:"Multiple Selection",id:"multiple-selection",level:3},{value:"Path Selection",id:"path-selection",level:3},{value:"Enum Selection",id:"enum-selection",level:3},{value:"Using Prompts in Custom Tools",id:"using-prompts-in-custom-tools",level:2},{value:"Advanced Prompting Features",id:"advanced-prompting-features",level:2},{value:"Conditional Prompting",id:"conditional-prompting",level:3},{value:"Dynamic Choices and Suggestions",id:"dynamic-choices-and-suggestions",level:3},{value:"Searchable Prompts",id:"searchable-prompts",level:3},{value:"Custom Validation",id:"custom-validation",level:3},{value:"Keyboard Shortcuts and Hints",id:"keyboard-shortcuts-and-hints",level:2},{value:"Text Input",id:"text-input-1",level:3},{value:"Selection Prompts",id:"selection-prompts",level:3},{value:"Multiple Selection (Checkbox)",id:"multiple-selection-checkbox",level:3},{value:"Examples from Hexagon Core",id:"examples-from-hexagon-core",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"prompting-system",children:"Prompting System"})}),"\n",(0,i.jsx)(n.p,{children:"Hexagon provides a powerful and flexible prompting system that allows you to create interactive command-line interfaces with rich input capabilities. This guide explains how the prompting system works and how to use it in your custom tools."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Hexagon's prompting system leverages two key Python libraries:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"InquirerPy"}),": Provides the interactive prompts with features like autocomplete, validation, and different input types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pydantic"}),": Handles type validation and conversion of user input"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The system allows you to define command-line arguments with type hints, which Hexagon uses to determine what kind of prompt to show and how to validate the input."}),"\n",(0,i.jsx)(n.h2,{id:"defining-arguments",children:"Defining Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["Arguments are defined using a class that inherits from ",(0,i.jsx)(n.code,{children:"ToolArgs"})," and uses type hints to specify the expected data types:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from hexagon.support.input.args import ToolArgs, PositionalArg, OptionalArg, Arg\n\nclass Args(ToolArgs):\n    # Required positional argument\n    name: PositionalArg[str] = Arg(\n        None, prompt_message="Enter your name"\n    )\n    \n    # Optional argument with default value\n    age: OptionalArg[int] = Arg(\n        30, prompt_message="Enter your age"\n    )\n    \n    # Optional argument with custom prompt suggestions\n    country: OptionalArg[str] = Arg(\n        "USA", \n        prompt_message="Select your country",\n        prompt_suggestions=["USA", "Canada", "Mexico", "Other"]\n    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"argument-types",children:"Argument Types"}),"\n",(0,i.jsx)(n.p,{children:"Hexagon supports two main types of arguments:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PositionalArg"}),": Required arguments that can be provided positionally on the command line"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OptionalArg"}),": Optional arguments that have default values"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-arg-function",children:"The Arg Function"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Arg"})," function is used to configure how arguments are prompted and validated. It accepts several parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Arg(\n    default,                # Default value for the argument\n    *,\n    alias=None,             # Alternative name for the argument\n    title=None,             # Title displayed in help text\n    description=None,       # Description displayed in help text\n    prompt_default=None,    # Default value shown in the prompt\n    prompt_message=None,    # Message displayed when prompting\n    prompt_instruction=None,# Additional instructions for the prompt\n    prompt_suggestions=None,# Suggestions for text input autocomplete\n    choices=None,           # Options for selection prompts\n    searchable=False,       # Whether the prompt supports searching\n    # Additional validation parameters\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prompt-types",children:"Prompt Types"}),"\n",(0,i.jsx)(n.p,{children:"Hexagon automatically selects the appropriate prompt type based on the argument's type hint:"}),"\n",(0,i.jsx)(n.h3,{id:"text-input",children:"Text Input"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"str"})," type arguments, Hexagon displays a text input prompt:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'name: PositionalArg[str] = Arg(None, prompt_message="Enter your name")\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will display a simple text input field where users can type their response."}),"\n",(0,i.jsx)(n.h3,{id:"text-input-with-autocomplete",children:"Text Input with Autocomplete"}),"\n",(0,i.jsxs)(n.p,{children:["For text inputs where you want to provide autocomplete suggestions, use the ",(0,i.jsx)(n.code,{children:"prompt_suggestions"})," parameter:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'username: PositionalArg[str] = Arg(\n    None, \n    prompt_message="Enter a username",\n    prompt_suggestions=["admin", "user", "guest", "developer"]\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When typing, users can press ",(0,i.jsx)(n.code,{children:"CTRL+SPACE"})," to see and select from available suggestions that match their input. Unlike ",(0,i.jsx)(n.code,{children:"choices"}),", these are just suggestions and users can still enter any text they want."]}),"\n",(0,i.jsx)(n.h3,{id:"numeric-input",children:"Numeric Input"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"int"})," and ",(0,i.jsx)(n.code,{children:"float"})," type arguments, Hexagon displays a numeric input prompt with validation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'age: OptionalArg[int] = Arg(30, prompt_message="Enter your age")\nheight: OptionalArg[float] = Arg(1.75, prompt_message="Enter your height in meters")\n'})}),"\n",(0,i.jsx)(n.p,{children:"These prompts will validate that the input can be converted to the specified numeric type."}),"\n",(0,i.jsx)(n.h3,{id:"boolean-input",children:"Boolean Input"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"bool"})," type arguments, Hexagon displays a yes/no prompt:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'confirm: OptionalArg[bool] = Arg(True, prompt_message="Do you want to proceed?")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Users can select Yes or No, which will be converted to ",(0,i.jsx)(n.code,{children:"True"})," or ",(0,i.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"list-selection",children:"List Selection"}),"\n",(0,i.jsx)(n.p,{children:"For arguments with a list of choices, Hexagon displays a selection prompt:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'country: OptionalArg[str] = Arg(\n    "USA", \n    prompt_message="Select your country",\n    choices=["USA", "Canada", "Mexico", "Other"]\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Users can navigate through the options and select one. The ",(0,i.jsx)(n.code,{children:"choices"})," parameter defines the available options in the selection list."]}),"\n",(0,i.jsx)(n.h3,{id:"multiple-selection",children:"Multiple Selection"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"List"})," type arguments, Hexagon displays a checkbox prompt:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import List\n\nselected_items: OptionalArg[List[str]] = Arg(\n    [], \n    prompt_message="Select items",\n    choices=["Item 1", "Item 2", "Item 3", "Item 4"]\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Users can select multiple items using the space bar to toggle selections. The ",(0,i.jsx)(n.code,{children:"choices"})," parameter defines the available options in the checkbox list."]}),"\n",(0,i.jsx)(n.h3,{id:"path-selection",children:"Path Selection"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"Path"})," type arguments, Hexagon provides file path completion:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pathlib import Path\n\nfile_path: OptionalArg[Path] = Arg(\n    None, \n    prompt_message="Select a file"\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This prompt will provide autocomplete for file paths."}),"\n",(0,i.jsx)(n.h3,{id:"enum-selection",children:"Enum Selection"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"Enum"})," type arguments, Hexagon displays a selection prompt with the enum values:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from enum import Enum\n\nclass Color(Enum):\n    RED = "red"\n    GREEN = "green"\n    BLUE = "blue"\n\ncolor: OptionalArg[Color] = Arg(\n    Color.RED, \n    prompt_message="Select a color"\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Users can select one of the enum values."}),"\n",(0,i.jsx)(n.h2,{id:"using-prompts-in-custom-tools",children:"Using Prompts in Custom Tools"}),"\n",(0,i.jsxs)(n.p,{children:["When implementing a custom tool, you define the arguments class and then access the values in your ",(0,i.jsx)(n.code,{children:"main"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from hexagon.support.output.printer import log\nfrom hexagon.support.input.args import ToolArgs, PositionalArg, OptionalArg, Arg\n\nclass Args(ToolArgs):\n    name: PositionalArg[str] = Arg(\n        None, prompt_message="Enter your name"\n    )\n    age: OptionalArg[int] = Arg(\n        30, prompt_message="Enter your age"\n    )\n\ndef main(tool, env, env_args, cli_args):\n    # Only prompt if values weren\'t provided as command-line arguments\n    if not cli_args.name.value:\n        cli_args.name.prompt()\n    \n    if not cli_args.age.value:\n        cli_args.age.prompt()\n    \n    # Access the values directly from cli_args\n    log.info(f"Name: {cli_args.name.value}")\n    log.info(f"Age: {cli_args.age.value}")\n    \n    # Return results\n    return [\n        f"Name: {cli_args.name.value}",\n        f"Age: {cli_args.age.value}"\n    ]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-prompting-features",children:"Advanced Prompting Features"}),"\n",(0,i.jsx)(n.h3,{id:"conditional-prompting",children:"Conditional Prompting"}),"\n",(0,i.jsx)(n.p,{children:"You can implement conditional prompting based on previous inputs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from hexagon.support.input.args import ToolArgs, PositionalArg, OptionalArg, Arg\n\nclass Args(ToolArgs):\n    has_car: OptionalArg[bool] = Arg(\n        False, prompt_message="Do you have a car?"\n    )\n    car_brand: OptionalArg[str] = Arg(\n        None, prompt_message="What brand is your car?"\n    )\n\ndef main(tool, env, env_args, cli_args):\n    if not cli_args.has_car.value:\n        cli_args.has_car.prompt()\n    \n    # Only prompt for car brand if user has a car\n    if cli_args.has_car.value and not cli_args.car_brand.value:\n        cli_args.car_brand.prompt()\n    \n    # Process inputs\n    if cli_args.has_car.value:\n        log.info(f"You have a {cli_args.car_brand.value} car")\n    else:\n        log.info("You don\'t have a car")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-choices-and-suggestions",children:"Dynamic Choices and Suggestions"}),"\n",(0,i.jsxs)(n.p,{children:["You can provide dynamic choices or suggestions based on runtime data. Both ",(0,i.jsx)(n.code,{children:"choices"})," and ",(0,i.jsx)(n.code,{children:"prompt_suggestions"})," can accept a function that returns a list:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def get_available_projects():\n    # This could fetch data from an API or local storage\n    return ["Project A", "Project B", "Project C"]\n\nclass Args(ToolArgs):\n    # For selection prompts, use choices\n    project_select: PositionalArg[str] = Arg(\n        None, \n        prompt_message="Select a project",\n        choices=get_available_projects\n    )\n    \n    # For text input with autocomplete, use prompt_suggestions\n    project_name: PositionalArg[str] = Arg(\n        None, \n        prompt_message="Enter a project name",\n        prompt_suggestions=get_available_projects\n    )\n'})}),"\n",(0,i.jsx)(n.p,{children:"The function will be called when the prompt is displayed, ensuring that the choices or suggestions are up-to-date."}),"\n",(0,i.jsx)(n.h3,{id:"searchable-prompts",children:"Searchable Prompts"}),"\n",(0,i.jsx)(n.p,{children:"For long lists of choices, you can enable searching:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Args(ToolArgs):\n    country: PositionalArg[str] = Arg(\n        None, \n        prompt_message="Select your country",\n        choices=["Afghanistan", "Albania", "Algeria", /* ... */],\n        searchable=True\n    )\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When the ",(0,i.jsx)(n.code,{children:"searchable"})," parameter is set to ",(0,i.jsx)(n.code,{children:"True"}),", users can type to filter the available choices. This is particularly useful for long lists of options."]}),"\n",(0,i.jsx)(n.h3,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,i.jsx)(n.p,{children:"You can add custom validation to ensure inputs meet specific requirements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pydantic import validator\n\nclass Args(ToolArgs):\n    email: PositionalArg[str] = Arg(\n        None, prompt_message="Enter your email"\n    )\n    \n    @validator("email")\n    def validate_email(cls, v):\n        if "@" not in v:\n            raise ValueError("Invalid email address")\n        return v\n'})}),"\n",(0,i.jsx)(n.h2,{id:"keyboard-shortcuts-and-hints",children:"Keyboard Shortcuts and Hints"}),"\n",(0,i.jsx)(n.p,{children:"Hexagon provides helpful keyboard shortcuts and hints for different prompt types:"}),"\n",(0,i.jsx)(n.h3,{id:"text-input-1",children:"Text Input"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+SPACE"}),": Autocomplete (if available)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ENTER"}),": Confirm input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+C"}),": Cancel"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+Z"}),": Skip (use default value)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"selection-prompts",children:"Selection Prompts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"\u2191/\u2193"})," or ",(0,i.jsx)(n.code,{children:"CTRL+P/CTRL+N"}),": Navigate options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ENTER"}),": Confirm selection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+C"}),": Cancel"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"multiple-selection-checkbox",children:"Multiple Selection (Checkbox)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SPACE"}),": Toggle selection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+I"}),": Toggle and move down"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SHIFT+TAB"}),": Toggle and move up"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CTRL+R"})," or ",(0,i.jsx)(n.code,{children:"ALT+R"}),": Toggle all"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ENTER"}),": Confirm selections"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples-from-hexagon-core",children:"Examples from Hexagon Core"}),"\n",(0,i.jsx)(n.p,{children:"Hexagon's core tools provide excellent examples of how to use the prompting system effectively:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hexagon/actions/internal/create_new_tool.py"}),": Demonstrates complex prompting with multiple argument types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hexagon/actions/internal/install_cli.py"}),": Shows path selection and validation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Prompt Messages"}),": Provide clear and concise prompt messages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Appropriate Defaults"}),": Set sensible default values when possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conditional Prompting"}),": Only prompt for information that's relevant based on previous inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Before Prompting"}),": Always check if a value was provided via command line before prompting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation"}),": Use appropriate type hints and validators to ensure data integrity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Suggestions"}),": Provide suggestions when the set of valid inputs is known"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Searchable"}),": Enable searching for long lists of options"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.p,{children:["Learn how to use ",(0,i.jsx)(n.a,{href:"hooks",children:"Hooks"})," to extend your CLI's functionality further."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);